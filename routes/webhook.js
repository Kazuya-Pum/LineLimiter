'use strict';
require('dotenv').config();
const express = require('express');
const line = require('@line/bot-sdk');

const router = express.Router();
const pgClient = require('../database').client;

// create LINE SDK config from env variables
const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.CHANNEL_SECRET,
};

// create LINE SDK client
const client = new line.Client(config);

// register a webhook handler with middleware
// about the middleware, please refer to doc
router.post('/', line.middleware(config), (req, res) => {
    Promise
        .all(req.body.events.map(handleEvent))
        .then((result) => res.json(result))
        .catch((err) => {
            console.error(err);
            res.status(500).end();
        });
});

// event handler
function handleEvent(event) {
    if (event.type === 'follow') {
        const centerQuery = {
            text: 'INSERT INTO center.user(user_id) VALUES($1)',
            values: [event.source.userId]
        }

        const userSchema = 'CREATE SCHEMA ' + event.source.userId + ' CREATE TABLE food (id int2 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(20) NOT NULL, limit_day date NOT NULL, image_url text, place varchar(40), memo varchar(100), category varchar(20), ctime timestamp default CURRENT_TIMESTAMP, notification_day int2[])';

        pgClient.query(centerQuery)
            .then(res => console.log("create center culmn"))
            .catch(err => console.error(err.stack))

        pgClient.query(userSchema)
            .then(res => console.log("create user schema"))
            .catch(err => console.error(err.stack))

        return Promise.resolve(null);

    } else if (event.type === 'unfollow') {
        const deleteCenter = {
            text: 'DELETE FROM center.user WHERE user_id = $1',
            values: [event.source.userId]
        }

        const deleteSchema = 'DROP SCHEMA ' + event.source.userId + ' CASCADE';

        pgClient.query(deleteCenter)
            .then(res => console.log("delete center"))
            .catch(err => console.error(err.stack))

        pgClient.query(deleteSchema)
            .then(res => console.log("delete user schema"))
            .catch(err => console.error(err.stack))
        return Promise.resolve(null);
    }


    if (event.type !== 'message' || event.message.type !== 'text') {
        // ignore non-text-message event
        return Promise.resolve(null);
    }

    // create a echoing text message
    const echo = { type: 'text', text: event.message.text };

    // use reply API
    return client.replyMessage(event.replyToken, echo);
}

module.exports = router;